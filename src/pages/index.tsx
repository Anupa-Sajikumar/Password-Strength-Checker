import Head from 'next/head'
import { useEffect, useState } from "react";
import calculatePasswordStrength from "@/utils/crackTime";
import { zxcvbn, ZxcvbnResult } from "@zxcvbn-ts/core";

const HomePage = () => {

    const [searchTerm, setSearchTerm] = useState('');
    const [result, setResult] = useState<ZxcvbnResult | null>(null);
    const [showPassword, setShowPassword] = useState(false);

    useEffect(() => {
        if (searchTerm?.length > 0) {
            calculatePasswordStrength(searchTerm).then((r) => setResult(r));
        }
    }, [searchTerm]);

    let passwordStrengthLabel = "";
    let passwordStrengthColor = "";
    let timeToCrack = "";
    let hasLowerCase = false;
    let hasUpperCase = false;
    let hasSymbol = false;
    let hasNumber = false;

    if (result) {
        const passwordStrengthScore = result.score / 5;
        passwordStrengthLabel = passwordStrengthScore >= 0.8 ? 'Strong' : 'Weak';
        passwordStrengthColor = passwordStrengthScore >= 0.8 ? 'green' : 'red';

        if (result.crackTimesDisplay) {
            timeToCrack = result.crackTimesDisplay.offlineSlowHashing1e4PerSecond;
        }

        const passwordSequence = result.sequence;
        hasLowerCase = passwordSequence.some((seq) => seq.pattern === "dictionary" && /[a-z]/.test(seq.token));
        hasUpperCase = passwordSequence.some((seq) => seq.pattern === "dictionary" && /[A-Z]/.test(seq.token));
        hasSymbol = passwordSequence.some((seq) => /[!@#$%^&*(),.?":{}|<>]/.test(seq.token));
        hasNumber = passwordSequence.some((seq) => /[0-9]/.test(seq.token));
    }

    const colorBarStyle = {
          width: `${result && Math.round(result.score / 5 * 100)}%`,
        height: '10px',
        backgroundColor: passwordStrengthColor,
        borderRadius: '6px',
        transition: 'width 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) 0s'
        
    };

    //Suggestions for typing passwords
const suggestions = [
    "Avoid common passwords such as 'password', '123456', or 'qwerty'",
    "Use a mix of upper and lowercase letters",
    "Include numbers and symbols",
    "Use a passphrase instead of a single word",
    "Avoid using personal information such as your name or date of birth",
    "Use a different password for each account"
];

    <div style={{ marginTop: '2rem', marginBottom: '2rem', display: 'inline-block' }}>
        <div style={colorBarStyle}></div>
    </div>
    
    let feedback = "";
    if (result) {
        feedback = `Password strength: ${passwordStrengthLabel}`;
    }
    <div className='my-8'>
        <p className='text-xl font-bold'>{feedback}</p>
    </div>

    return (
        <>
            <Head>
                <title>Password Strength</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className='text-center'>
                <header className='bg-pink-200'>
                    <h1 className='bg-blue-300 text-center text-[30px]'>PASSWORD STRENGTH CALCULATOR</h1>
                </header>
                <div className='bg-red-200'>
                    <label>
                        Password:
                        <input
                            type={showPassword ? 'text' : 'password'}
                            placeholder="Enter your Password Here"
                            value={searchTerm}
                            onChange={(e) =>
                                setSearchTerm(e.target.value)}
                        />
                    </label>
                    <label>
                        <input
                            type="checkbox"
                            checked={showPassword}
                            onChange={(e) =>
                                setShowPassword(e.target.checked)}
                        />
                        Show Password
                    </label>
                    <div style={{ marginTop: '2rem', marginBottom: '2rem' }}>
                        <div style={colorBarStyle}></div>
                    </div>
      
                    {result && (
                        <div>
                            <div>
                                <span style={{ color: passwordStrengthColor }}>
                                    {Math.round(result.score / 5 * 100)}% ({result.score}/5)
                                </span>
                                <span style={{ marginLeft: '3.5rem', color: passwordStrengthColor }}>
                                    {passwordStrengthLabel}
                                </span>
                            </div>
                            {hasLowerCase && <div>Contains Lowercase</div>}
                            {hasUpperCase && <div>Contains Uppercase</div>}
                            {hasSymbol && <div>Contains Symbol</div>}
                            {hasNumber && <div>Contains Number</div>}
                            {timeToCrack && (
                                <div style={{ marginTop: '1.5rem' }}>
                                    Time to Crack: <strong>{timeToCrack}</strong>
                                </div>
                            )}
                            
          </div>)}
        
          </div>
          {result && result.score < 4 && (
    <div className="text-left mt-4">
        <p className="text-sm font-medium text-gray-700 mb-1">Suggestions:</p>
        <ul className="list-disc list-inside">
            {suggestions.map((suggestion, index) => (
                <li key={index} className="text-sm text-gray-600">{suggestion}</li>
            ))}
        </ul>
    </div>
)}
      </main>

    </>
  )
};

export default HomePage;
